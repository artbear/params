#Использовать json
#Использовать asserts
#Использовать cmdline

Перем ТекущийКаталогПроекта;
Перем Лог;
Перем СоответствиеПеременныхСреды;
Перем ПутьФайлаНастроекПоУмолчанию;

Перем РанееПрочитанныеПараметры;

#Область ПрограммныйИнтерфейс

Процедура ПриСозданииОбъекта(Знач НовыйПутьФайлаНастроек = "")
	Если Не ЗначениеЗаполнено(НовыйПутьФайлаНастроек) Тогда
		ПутьФайла = ОбъединитьПути(ТекущийКаталог(), ЧтениеПараметров.ИмяФайлаНастроекПоУмолчанию());
		ФайлПоУмолчанию = Новый Файл(ПутьФайла);
		Если ФайлПоУмолчанию.Существует() Тогда
			НовыйПутьФайлаНастроек = ПутьФайла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйПутьФайлаНастроек) Тогда
		УстановитьФайлПоУмолчанию(НовыйПутьФайлаНастроек);
	КонецЕсли;
КонецПроцедуры

// Выполнить основной анализ и получить финальные параметры с учетом командной строки, переменных среды, файлов настроек
//
// Параметры:
//   Парсер - <ПарсерАргументовКоманднойСтроки> - ранее инициализированный парсер со всеми настройками командной строки
//		 (из пакета cmdline)
//   Аргументы - <Массив>, необязательный - набор аргументов командной строки, 
//		Если не указан, используется штатная коллекция АргументыКоманднойСтроки
//   КлючФайлаНастроек - <Строка>, необязательный - именованный параметр командной строки, 
//		который указывает на json-файл настройки 
//		Если не указан, используется ключ "--settings"
//   ПрефиксПеременныхСреды - <Строка>, необязательный - 
//		Если не указан, используется ключ "ONESCRIPT_APP_"
//
//  Возвращаемое значение:
//   <Соответствие> - итоговые параметры
//
Функция Прочитать(Парсер, Знач Аргументы = Неопределено, 
		Знач КлючФайлаНастроек = "", Знач ПрефиксПеременныхСреды = "") Экспорт

	Параметры = Неопределено;

	Попытка
		
		Если Аргументы = Неопределено Тогда
			Аргументы = АргументыКоманднойСтроки;
		КонецЕсли;
		Если ПрефиксПеременныхСреды = "" Тогда
			ПрефиксПеременныхСреды = ЧтениеПараметров.ПрефиксПеременныхОкружения();
		КонецЕсли;
		Лог.Отладка("Использую префикс переменных окружения %1", ПрефиксПеременныхСреды);

		ТаблицаКоманд = Парсер.СправкаВозможныеКоманды();
		Если ТаблицаКоманд.Количество() = 0 Тогда
			ТаблицаКоманд = Парсер.СправкаПоПараметрам();		
		КонецЕсли;

		НовоеСоответствиеПеременныхСреды = ПолучитьСоответствиеПеременныхСредыИзТаблицыКоманд(ТаблицаКоманд, 
			ПрефиксПеременныхСреды);

		Если Не ЗначениеЗаполнено(СоответствиеПеременныхСреды) Тогда
			СоответствиеПеременныхСреды = НовоеСоответствиеПеременныхСреды;
		Иначе
			ДополнитьСоответствиеСУчетомПриоритета(СоответствиеПеременныхСреды, НовоеСоответствиеПеременныхСреды);

			Лог.Отладка("Коллекция переменных среды с соответствующими ключами-параметрами:");
			ПоказатьПараметрыВРежимеОтладки(СоответствиеПеременныхСреды);
		КонецЕсли;

		Параметры = Парсер.Разобрать(Аргументы);

		Если ТипЗнч(Параметры) = Тип("Структура") и Параметры.Свойство("Команда") Тогда
			Команда = Параметры.Команда;
			Параметры = Параметры.ЗначенияПараметров;
			Лог.Отладка("Параметры команды %1 из командной строки, полученные от парсера cmdline:", Команда);
		Иначе
			Лог.Отладка("Параметры командной строки, полученные от парсера cmdline:");
		КонецЕсли;

		ПоказатьПараметрыВРежимеОтладки(Параметры);
		
		Если КлючФайлаНастроек = "" Тогда
			КлючФайлаНастроек = ЧтениеПараметров.КлючФайлаНастроек();
		КонецЕсли;
		Лог.Отладка("КлючФайлаНастроек <%1>", КлючФайлаНастроек);

		Если Не ЗначениеЗаполнено(ТекущийКаталогПроекта) Тогда
			ТекущийКаталогПроекта = ТекущийКаталог();
		КонецЕсли;
		Лог.Отладка("ТекущийКаталогПроекта <%1>", ТекущийКаталогПроекта);
		
		ДополнитьЗначенияПараметров(Параметры, Команда, КлючФайлаНастроек, СоответствиеПеременныхСреды);

		Параметры.Вставить("Команда", Команда);
		
		Лог.Отладка("Итоговые параметры:");
		ПоказатьПараметрыВРежимеОтладки(Параметры);
	Исключение
		Лог.Ошибка("Ошибка чтения настроек
		|%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		// |%1", ОписаниеОшибки());

		ВызватьИсключение;
	КонецПопытки;

	РанееПрочитанныеПараметры = Параметры;

	Возврат Параметры;
КонецФункции // Прочитать

// Получает значение параметра по имени ключа
// Предварительно нужно прочитать параметры с помощью метода Прочитать
//
// Параметры:
//   КлючПараметра - <Строка> - произвольный ключ
//   ЗначениеПоУмолчанию - <Строка>, необязательный - значение по умолчанию, если значение не получено из настроек
//
//  Возвращаемое значение:
//   <Любой> - значение по ключу
//
Функция Получить(КлючПараметра, ЗначениеПоУмолчанию = Неопределено) Экспорт
	СообщениеОшибки = "Получение значений возможно только после вызова метода Прочитать";
	Ожидаем.Что(РанееПрочитанныеПараметры, СообщениеОшибки).Заполнено();
	Значение = РанееПрочитанныеПараметры.Получить(КлючПараметра);

	Если Значение = Неопределено И ЗначениеПоУмолчанию <> Неопределено Тогда
		Значение = ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат Значение;
КонецФункции // Получить

// Установить текущий каталог проекта-клиента
//
// Параметры:
//   ПарамТекущийКаталогПроекта - <Строка> - путь каталога
//
Процедура УстановитьТекущийКаталогПроекта(Знач ПарамТекущийКаталогПроекта) Экспорт
	ТекущийКаталогПроекта = ПарамТекущийКаталогПроекта;
КонецПроцедуры

// Получить текущий каталог проекта-клиента
//
//  Возвращаемое значение:
//   <Строка> - путь каталога
//
Функция ПолучитьТекущийКаталогПроекта() Экспорт
	Возврат ТекущийКаталогПроекта;
КонецФункции // ПолучитьТекущийКаталогПроекта()

// Установить путь к файлу настроек по умолчанию
//
// Параметры:
//   НовыйПутьФайлаНастроек - <Строка> - путь файла
//
Процедура УстановитьФайлПоУмолчанию(Знач НовыйПутьФайлаНастроек) Экспорт
	Файл = Новый Файл(НовыйПутьФайлаНастроек);
	СообщениеОшибки = СтрШаблон("Файл настроек не существует. Путь %1", НовыйПутьФайлаНастроек);
	Ожидаем.Что(Файл.Существует(), СообщениеОшибки).ЭтоИстина();

	ПутьФайлаНастроекПоУмолчанию = НовыйПутьФайлаНастроек;
КонецПроцедуры

// Загрузить соответствие переменных окружения параметрам команд
//
// Параметры:
//   Источник - <Соответствие или ФиксированноеСоответствие> - откуда загружаем
//		ключ - имя переменной окружения
//		значение - имя соответствующего ключа/параметра настройки
//
Процедура ЗагрузитьСоответствиеПеременныхОкруженияПараметрамКоманд(Источник) Экспорт
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника <> Тип("Соответствие") И ТипИсточника <> Тип("ФиксированноеСоответствие") Тогда
		ВызватьИсключение "Неверный тип источника у метода ЗагрузитьСоответствиеПеременныхОкруженияПараметрамКоманд";
	КонецЕсли;
	СоответствиеПеременныхСреды = Новый Соответствие;
	Для каждого КлючЗначение Из Источник Цикл
		СоответствиеПеременныхСреды.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

Функция ПолучитьСоответствиеПеременныхСредыИзТаблицыКоманд(Знач ТаблицаКоманд, Знач ПрефиксПеременныхСреды)
	Рез = Новый Соответствие;
	ЕстьВложеннаяТаблицаПараметров = ТаблицаКоманд.Колонки.Найти("Параметры") <> Неопределено;
	Если ЕстьВложеннаяТаблицаПараметров Тогда
		Для каждого Строка Из ТаблицаКоманд Цикл
			ДобавитьПараметрВКоллекциюСоответствияПеременныхОкружения(Рез, Строка.Параметры, ПрефиксПеременныхСреды);
		КонецЦикла;
	Иначе
		ДобавитьПараметрВКоллекциюСоответствияПеременныхОкружения(Рез, ТаблицаКоманд, ПрефиксПеременныхСреды);
	КонецЕсли;

	Лог.Отладка("Соответствие параметров команд и переменных среды:");
	ПоказатьПараметрыВРежимеОтладки(Рез);

	Возврат Рез;
КонецФункции // ПолучитьСоответствиеПеременныхСредыИзТаблицыКоманд

Процедура ДобавитьПараметрВКоллекциюСоответствияПеременныхОкружения(РезСоответствие, Параметры, ПрефиксПеременныхСреды)
	Для каждого Параметр Из Параметры Цикл
		ИмяПараметра = Параметр.Имя;
		ИмяПеременнойСреды = СтрШаблон("%1%2", 
			ПрефиксПеременныхСреды, ПреобразоватьВИмяПеременнойСреды(ИмяПараметра));
			РезСоответствие.Вставить(ИмяПеременнойСреды, ИмяПараметра);
	КонецЦикла;
КонецПроцедуры

Функция ПреобразоватьВИмяПеременнойСреды(Знач ИмяПараметра)
	Рез = ИмяПараметра;
	Рез = СтрЗаменить(Рез, "-", "_");
	Рез = СтрЗаменить(Рез, " ", "_");
	Возврат Рез;
КонецФункции // ПреобразоватьВИмяПеременнойСреды

Процедура ДополнитьЗначенияПараметров(Знач ЗначенияПараметров, Знач Команда, Знач КлючФайлаНастроек, 
		СоответствиеПеременныхСреды)
	
	Если Не ЗначениеЗаполнено(Команда) Тогда
		Команда = ЧтениеПараметров.КлючКомандыВФайлеНастроекПоУмолчанию();
	КонецЕсли;
	// ТекущийКаталогПроекта = УстановитьКаталогТекущегоПроекта(ЗначенияПараметров["--root"]);

	// ПараметрыСистемы.КорневойПутьПроекта = ТекущийКаталогПроекта;

	Если Не ЗначениеЗаполнено(ПутьФайлаНастроекПоУмолчанию) Тогда
		ПутьФайлаНастроекПоУмолчанию = ЧтениеПараметров.ИмяФайлаНастроекПоУмолчанию();
	КонецЕсли;

	НастройкиИзФайла = ПрочитатьНастройкиИзПараметраФайл(ЗначенияПараметров, КлючФайлаНастроек, ТекущийКаталогПроекта, 
		ПутьФайлаНастроекПоУмолчанию);
	
	ОбработатьШаблонныеПодстановки(НастройкиИзФайла);

	ЗначенияПараметровНизкийПриоритет = Новый Соответствие;

	Если НастройкиИзФайла.Количество() > 0 Тогда 
		ДополнитьАргументыИзФайлаНастроек(Команда, ЗначенияПараметровНизкийПриоритет, НастройкиИзФайла);
	КонецЕсли;
	
	ЗаполнитьЗначенияИзПеременныхОкружения(ЗначенияПараметровНизкийПриоритет, СоответствиеПеременныхСреды);

	ДополнитьСоответствиеСУчетомПриоритета(ЗначенияПараметров, ЗначенияПараметровНизкийПриоритет);

	ОбработатьШаблонныеПодстановки(ЗначенияПараметров);
	
	// // на случай переопределения этой настройки повторная установка
	// УстановитьКаталогТекущегоПроекта(ЗначенияПараметров["--root"]);

	// ДобавитьДанныеПодключения(ЗначенияПараметров);
КонецПроцедуры

Функция ПрочитатьНастройкиИзПараметраФайл(ЗначенияПараметров, КлючФайлаНастроек, ТекущийКаталогПроекта, 
		ПутьФайлаНастроекПоУмолчанию)

	ЧитаемОдинФайл = Истина;
	МассивИменФайлов = Неопределено;
		
	ПутьКФайлуНастройки = ЗначенияПараметров.Получить(КлючФайлаНастроек);
	Если Не ЗначениеЗаполнено(ПутьКФайлуНастройки) Тогда
		
		Лог.Отладка("В параметрах не задан ключ %1 к файлу настройки", КлючФайлаНастроек);

	Иначе
		МассивИменФайлов = СтрРазделить(ПутьКФайлуНастройки, ";");
		Если МассивИменФайлов.Количество() > 0 Тогда

			ЧитаемОдинФайл = Ложь;
			
		КонецЕсли;
	КонецЕсли;

	Если ЧитаемОдинФайл Тогда
		
		НастройкиИзФайла = ПрочитатьНастройкиИзФайлаJSON(ТекущийКаталогПроекта, ПутьКФайлуНастройки, 
			ПутьФайлаНастроекПоУмолчанию);

	Иначе

		НастройкиИзФайла = Новый Соответствие;
		Для каждого ИмяФайла Из МассивИменФайлов Цикл
			ИмяФайла = СтрЗаменить(ИмяФайла, """", "");
			НовыеПараметры = ПрочитатьФайлJSON(ОбъединитьПути(ТекущийКаталогПроекта, ИмяФайла));
			ОбработатьПараметрыРекурсивно(НовыеПараметры, НастройкиИзФайла, ТекущийКаталогПроекта);		
		КонецЦикла;

	КонецЕсли;

	Возврат НастройкиИзФайла;
КонецФункции // ПрочитатьНастройкиИзПараметраФайл()

Функция ПрочитатьНастройкиИзФайлаJSON(Знач ТекущийКаталогПроекта, Знач ПутьКФайлу, Знач ПутьФайлаПоУмолчанию )
	Рез = Новый Соответствие;

	// Лог.Отладка(":"+ПутьКФайлу+":"+ПутьФайлаПоУмолчанию);
	Если ПутьКФайлу = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда 
		ПутьКФайлу = ПутьФайлаПоУмолчанию;
		
		Лог.Отладка("Использую путь к файлу настройки по умолчанию %1", ПутьКФайлу);
		Файл = Новый Файл(ОбъединитьПути(ТекущийКаталогПроекта, ПутьКФайлу));
		
		Если НЕ Файл.Существует() Тогда
			Лог.Отладка("Файл настройки по умолчанию не существует. %1", ПутьКФайлу);
			
			Возврат Рез;
		КонецЕсли;

	Иначе
		Лог.Отладка("Передан путь к файлу настройки %1", ПутьКФайлу);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда 
		Лог.Отладка("Передана пустая строка в качестве пути к файлу настройки");
		Возврат Рез;
	КонецЕсли;
	Ожидаем.Что(ПутьКФайлу, "Путь к файлу настроек должен быть заполнен").Не_().Равно("").Не_().Равно(Неопределено);

	ПутьКФайлу = ОбъединитьПути(ТекущийКаталогПроекта, ПутьКФайлу);

	Рез = ПрочитатьФайлJSON(ПутьКФайлу);
	Лог.Отладка("Параметры из файла настроек:");
	ПоказатьПараметрыВРежимеОтладки(Рез);
	Возврат Рез;
КонецФункции

Функция ПрочитатьФайлJSON(Знач ИмяФайла)
	Перем Параметры;

	Лог.Отладка("Путь файла настроек <%1>", ИмяФайла);

	СообщениеОшибки = СтрШаблон("Файл настроек не существует. Путь <%1>", ИмяФайла);
	JsonСтрока  = ПрочитатьФайл(ИмяФайла, СообщениеОшибки);
	
	Лог.Отладка("Текст файла настроек:
	|%1", JsonСтрока);
	
	JsonСтрока = ВырезатьКомментарииИзТекстаJSON(JsonСтрока);

	ПарсерJSON  = Новый ПарсерJSON();
	Параметры   = ПарсерJSON.ПрочитатьJSON(JsonСтрока);

	Файл = Новый Файл(ИмяФайла);
	ПутьКаталогаФайла = Файл.Путь;

	Результат = Новый Соответствие;
	ОбработатьПараметрыРекурсивно(Параметры, Результат, ПутьКаталогаФайла);

	Возврат Результат;
КонецФункции

Функция ПрочитатьФайл(Знач ИмяФайла, Знач СообщениеОшибки)
	ФайлСуществующий = Новый Файл(ИмяФайла);
	Если Не ФайлСуществующий.Существует() Тогда
		ВызватьИсключение СообщениеОшибки;
	КонецЕсли;

	Чтение = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
	Рез  = Чтение.Прочитать();
	Чтение.Закрыть();
	Возврат Рез;
КонецФункции // ПрочитатьФайл()

Функция ВырезатьКомментарииИзТекстаJSON(Знач JsonСтрока)

	// вырезаем обычные комменты типа "// комментарий"
	Регулярка = Новый РегулярноеВыражение("(^\/\/.*$)");
	Рез = Регулярка.Заменить(JsonСтрока, "$0" );

	// вырезаем комменты после строки, например, "строка //комментарий"
	Регулярка = Новый РегулярноеВыражение("(^.*)(\/\/.*$)");
	Рез = Регулярка.Заменить(Рез, "$1" );

	Возврат Рез;
КонецФункции // ВырезатьКомментарииИзТекстаJSON()

Процедура ОбработатьПараметрыРекурсивно(Источник, Приемник, ПутьКаталогаФайла)
	Для каждого КлючЗначение Из Источник Цикл
		Ключ = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;

		Если ТипЗнч( Значение ) = Тип("Соответствие") Тогда
			
			ОбработатьПараметрыРекурсивно( Значение, Приемник, ПутьКаталогаФайла );
			
		Иначе
			
			Если Не ПрочитатьФайлИзЗначенияПараметра( Ключ, Значение, ПутьКаталогаФайла, Приемник ) Тогда
				Приемник.Вставить( Ключ, Значение );
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПрочитатьФайлИзЗначенияПараметра( Ключ, Значение, ПутьКаталогаФайла, Приемник)
	ПрефиксПараметрФайл = ЧтениеПараметров.ПрефиксКлючаДляЧтенияВложенногоФайлаНастроек();
	ЕстьПараметрФайл = СтрНачинаетсяС( ВРег(Ключ), ВРег(ПрефиксПараметрФайл) );
	Если НЕ ЕстьПараметрФайл Тогда
		Возврат Ложь;
	КонецЕсли;
	Лог.Отладка("Нашли ключ файла <%1>, значение <%2>, путь каталога-родителя <%3>", Ключ, Значение, ПутьКаталогаФайла);

	ПутьФайла = ОбъединитьПути(ПутьКаталогаФайла, Значение);
	Параметры = ПрочитатьФайлJSON(ПутьФайла);

	ОбработатьПараметрыРекурсивно(Параметры, Приемник, ПутьКаталогаФайла);
	Возврат Истина;
КонецФункции // ПрочитатьФайлИзЗначенияПараметра( Ключ, Значение, ПутьКаталогаФайла, Приемник)

Процедура ОбработатьШаблонныеПодстановки(Параметры)
	
	РегулярноеВыражение = Новый РегулярноеВыражение( "%([^%]*)%" );
	
	Для Счетчик = 1 По 5 Цикл

		МассивПодстановок = Новый Массив;
		
		НайтиШаблонныеПодстановки(Параметры, МассивПодстановок, РегулярноеВыражение);

		Если НЕ ЗначениеЗаполнено(МассивПодстановок) Тогда
			Прервать;			
		КонецЕсли;
		
		ЗначенияКлючей = Новый Соответствие;
		НайтиВсеКлючи(Параметры, ЗначенияКлючей);
		
		ВыполнитьПодстановки(МассивПодстановок, ЗначенияКлючей);

	КонецЦикла;

КонецПроцедуры

Процедура НайтиШаблонныеПодстановки(Параметры, Знач МассивПодстановок, Знач РегулярноеВыражение)
	
	Для каждого КлючЗначение Из Параметры Цикл
		Значение = КлючЗначение.Значение;
		Тип = ТипЗнч(Значение);
		Если Тип = Тип("Строка") Тогда
			КоллекцияСовпадений = РегулярноеВыражение.НайтиСовпадения( Значение );
			Если КоллекцияСовпадений.Количество() > 0 Тогда
				Описание = Новый Структура("Ключ, Параметры", КлючЗначение.Ключ, Параметры);
				Описание.Вставить("КоллекцияСовпадений", КоллекцияСовпадений);
				МассивПодстановок.Добавить(Описание);
				
				Лог.Отладка("Нашли значение для подстановки <%1>", Значение);
			КонецЕсли;
		
		ИначеЕсли Тип = Тип("Соответствие") Тогда
			НайтиШаблонныеПодстановки(Значение, МассивПодстановок, РегулярноеВыражение);
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьПодстановки(МассивПодстановок, ЗначенияКлючей)
	Для каждого ОписаниеПодстановки Из МассивПодстановок Цикл
		КлючПодстановки = ОписаниеПодстановки.Ключ;

		КоллекцияСовпадений = ОписаниеПодстановки.КоллекцияСовпадений;
		Для каждого Совпадение Из КоллекцияСовпадений Цикл
			Значение = Совпадение.Значение;
			ИмяКлюча = Совпадение.Группы[1].Значение;
			Лог.Отладка("Нашли имя ключа <%1> для возможной подстановки в <%2>", ИмяКлюча, Значение);

			ЗначениеПоКлючу = ЗначенияКлючей[ИмяКлюча];
			Если ЗначениеПоКлючу <> Неопределено Тогда
				ОписаниеПодстановки.Параметры.Вставить(КлючПодстановки, ЗначениеПоКлючу);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура НайтиВсеКлючи(Параметры, ЗначенияКлючей)
	Для каждого КлючЗначение Из Параметры Цикл
		Ключ = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;

		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда
			НайтиВсеКлючи(Значение, ЗначенияКлючей);
		Иначе
			ЗначенияКлючей.Вставить(Ключ, Значение);
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

Процедура ДополнитьАргументыИзФайлаНастроек(Знач Команда, ЗначенияПараметров, Знач НастройкиИзФайла)
	Перем КлючПоУмолчанию, Настройки;
	КлючПоУмолчанию = ЧтениеПараметров.КлючКомандыВФайлеНастроекПоУмолчанию();

	ДополнитьСоответствиеСУчетомПриоритета(ЗначенияПараметров, НастройкиИзФайла.Получить(Команда));
	
	НастройкиПоУмолчанию = НастройкиИзФайла.Получить(КлючПоУмолчанию);
	Если НастройкиПоУмолчанию = Неопределено Тогда
		ДополнитьСоответствиеСУчетомПриоритета(ЗначенияПараметров, НастройкиИзФайла);
	Иначе
		ДополнитьСоответствиеСУчетомПриоритета(ЗначенияПараметров, НастройкиПоУмолчанию);
	КонецЕсли;

	Лог.Отладка("Параметры после вставки из файла настроек:");
	ПоказатьПараметрыВРежимеОтладки(ЗначенияПараметров);

КонецПроцедуры //ДополнитьАргументыИзФайлаНастроек

Процедура ДополнитьСоответствиеСУчетомПриоритета(КоллекцияОсновная, Знач КоллекцияДоп)
	Если КоллекцияДоп = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Для Каждого Элемент из КоллекцияДоп Цикл 
		Значение = КоллекцияОсновная.Получить(Элемент.Ключ);
		Если Значение = Неопределено Тогда 
			КоллекцияОсновная.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ДополнитьСоответствиеСУчетомПриоритета

Процедура ЗаполнитьЗначенияИзПеременныхОкружения(ЗначенияПараметров, Знач СоответствиеПеременных) Экспорт

	Для каждого Элемент Из СоответствиеПеременных Цикл
		ЗначениеПеременной = ПолучитьПеременнуюСреды(ВРег(Элемент.Ключ));
		Лог.Отладка("В переменных среды найден параметр: <%1> = <%2>, тип %3", 
			Элемент.Ключ, ЗначениеПеременной, ТипЗнч(ЗначениеПеременной));

		Если ЗначениеПеременной <> Неопределено Тогда
			Если ЗначениеПеременной = """""" Или ЗначениеПеременной = "''" Тогда
				ЗначениеПеременной = "";
			КонецЕсли;
			ЗначенияПараметров.Вставить(Элемент.Значение, ЗначениеПеременной);

			Лог.Отладка("Из переменных среды получен параметр: <%1> = <%2>", Элемент.Значение, ЗначениеПеременной);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПоказатьПараметрыВРежимеОтладки(ЗначенияПараметров, Знач Родитель = "")
	Если Родитель = "" Тогда
		Лог.Отладка("	Тип параметров %1", ТипЗнч(ЗначенияПараметров));
	КонецЕсли;
	Если ЗначенияПараметров.Количество() = 0 Тогда
		Лог.Отладка("	Коллекция параметров пуста!");
	КонецЕсли;
	Для каждого Элемент из ЗначенияПараметров Цикл 
		ПредставлениеКлюча = Элемент.Ключ;
		Если Не ПустаяСтрока(Родитель) Тогда
			ПредставлениеКлюча  = СтрШаблон("%1.%2", Родитель, ПредставлениеКлюча);
		КонецЕсли;
		Лог.Отладка("	Получен параметр <%1> = <%2>", ПредставлениеКлюча, Элемент.Значение);
		Если ТипЗнч(Элемент.Значение) = Тип("Соответствие") Тогда
			ПоказатьПараметрыВРежимеОтладки(Элемент.Значение, ПредставлениеКлюча);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Лог = ПараметрыСистемы.ПолучитьЛог();
