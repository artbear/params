///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с набором служебных параметров приложения
//
// При создании нового приложения обязательно внести изменение 
// в ф-ии ИмяПродукта, указав имя вашего приложения.
//
// При выпуске новой версии обязательно изменить ее значение
// в ф-ии ВерсияПродукта
//
///////////////////////////////////////////////////////////////////////////////

#Использовать logos

Перем Лог;

//	Возвращает текущую версию продукта
//
// Возвращаемое значение:
//   Строка   - Значение текущей версии продукта
//
Функция ВерсияПродукта() Экспорт
	
	Возврат "1.0";
	
КонецФункции // ВерсияПродукта

// ИмяПродукта
//	Возвращает имя продукта
//
// Возвращаемое значение:
//   Строка   - Значение имени продукта
//
Функция ИмяПродукта() Экспорт
	
	Возврат "params";
	
КонецФункции // ИмяПродукта

//	Возвращает идентификатор лога приложения
//
// Возвращаемое значение:
//   Строка   - Значение идентификатора лога приложения
//
Функция ИмяЛогаСистемы() Экспорт
	
	Возврат "oscript.lib." + ИмяПродукта();
	
КонецФункции // ИмяЛогаСистемы

//	Форматирование логов
//
Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт

	Возврат СтрШаблон("%1: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);

КонецФункции

//	Инициализирует и настраивает лог приложения
// 
// Параметры:
//	УровеньЛогаСтрока - Строка - уровень логов, выводимых в консоль при выполнении скрипта
//
// Возвращаемое значение:
//   Лог   - Инициализированный лог, готовый к использованию
//
Функция ИнициализироватьЛог(Знач УровеньЛогаСтрока = Неопределено) Экспорт

	Если УровеньЛогаСтрока = Неопределено Тогда
		УровеньЛога = УровниЛога.Информация;
	Иначе
		УровеньЛога = УровниЛога[УровеньЛогаСтрока];
	КонецЕсли;
	
	Лог = Логирование.ПолучитьЛог(ИмяЛогаСистемы());
	Лог.УстановитьУровень(УровеньЛога);
	Лог.УстановитьРаскладку(ЭтотОбъект);

	Лог_cmdline = Логирование.ПолучитьЛог("oscript.lib.cmdline");
	Лог_cmdline.УстановитьУровень(УровеньЛога);

	Возврат Лог;

КонецФункции

//	Возвращает лог приложения
// 
// Возвращаемое значение:
//   Лог   - Текущий лог приложения
//
Функция ПолучитьЛог() Экспорт

	Если Лог = Неопределено Тогда
		ИнициализироватьЛог();
	КонецЕсли;

	Возврат Лог;

КонецФункции
